---
title: "Vasuki Beginner Documentation"
format: html
css: assets/custom.css
---

[Edit on GitHub](https://github.com/YourUser/VasukiDocs/edit/main/beginner.qmd)

<!-- Table of Contents -->
- [Installation](#installation)
- [Overview](#overview)
- [Basic Syntax and Structure](#basic-syntax-and-structure)
- [Data Types and Variables](#data-types-and-variables)
- [Operators and Expressions](#operators-and-expressions)
- [Control Structures](#control-structures)
- [Functions and I/O](#functions-and-i-o)
- [Special Language Features](#special-language-features)
- [Error Handling and Troubleshooting](#error-handling-and-troubleshooting)
- [Example Program Walkthrough](#example-program-walkthrough)

# **Vasuki Beginner Documentation**

Welcome to Vasuki! This guide is crafted for new users who want to learn the language step by step. Every topic is explained in depth with code examples, detailed theoretical explanations (including return types and behavior), and common error troubleshooting tips. Whether you are completely new to coding or coming from another language, this documentation will help you get started with Vasuki.

---

## **Installation**

Before writing code in Vasuki, set up your environment by following these steps:

### Step 1: **Clone the Repository**

Clone the Vasuki repository from GitHub and setup environment:
```bash
git clone https://github.com/pranjal15195gaur/Vasuki.git
./run.sh
```

**Purpose:** This command downloads the entire Vasuki project to your local machine. It gives you access to the interpreter, source code, and additional resources.

**Return Type:** Git outputs progress messages as text; it does not return a value for use in the code.

**Troubleshooting:**

- **Error:** “repository not found”  
  - **Solution:** Verify the repository URL and ensure you have proper access permissions.

### Step 2: **Check Your Vasuki Version**

Run:

```bash
vasuki --version
```

**Purpose:** This command displays the current Python version installed on your system.

**Importance:** Vasuki requires Python 3.8 or newer to run correctly.

**Return Type:** A string such as "Python 3.9.1" is printed.

**Troubleshooting:**

- **Error:** “Python not recognized”  
  - **Solution:** Ensure Python is installed and properly added to your system’s PATH.

### Step 3: **Run the Interpreter**

Create a source file (e.g., program.txt) containing your Vasuki code, then execute:

```bash
vasuki program.vasuki
```

**Purpose:** This command starts the Vasuki interpreter, which reads and executes your code from the specified file.

**Return Type:** The interpreter evaluates the code and prints the output (if any) to the console.

**Troubleshooting:**

- **Error:** “File not found”  
  - **Solution:** Verify the file name and location.

## **Overview**

Vasuki is a lightweight, interpreter-based scripting language with a focus on simplicity and flexibility. Its key features include:

- **Variables:** Store and manipulate data.
- **Arithmetic Operations:** Perform basic math such as addition, subtraction, multiplication, division, exponentiation, and modulo.
- **Control Structures:** Execute code conditionally or repeatedly, and notably, these structures also return values.
- **Input/Output:** Use the print function to display results.
- **Function Calls:** Leverage built-in functions like max and min.
- **Scoping:** Vasuki supports both static and dynamic scoping for variable resolution.
- **Implicit Return:** If a statement is written without a semicolon, it is treated as if an implicit return is appended.

**Theory:** Every expression in Vasuki returns a value (e.g., numbers, booleans, etc.). This makes it easy to chain expressions and use control structures in a more functional style.

## **Basic Syntax and Structure**

Vasuki code is structured into statements and expressions with clear syntactic rules.

### **Key Concepts**

- **Case Sensitivity:** All keywords and variable names are case-sensitive.
- **Statements:** Each statement typically ends with a semicolon (;). Omitting the semicolon causes Vasuki to interpret the end-of-line as an implicit return.
- **Blocks:** Curly braces {} group multiple statements together; they are commonly used in control structures.

**Theory & Return Types:**

- **Expression Evaluation:** An expression returns a specific type (integer, float, boolean, etc.).
- **Implicit Return:** A line without a semicolon is treated as returning the result of that expression.

**Example:**
```bash
var x = 10;
x = x + 5
```

**Explanation:**

- **Line 1:** `var x = 10;` declares a variable x with the integer value 10.  
  **Return Type:** Integer (10).
- **Line 2:** `x = x + 5` updates x by adding 5. Since no semicolon is present, Vasuki implicitly returns the new value 15.  
  **Return Type:** Integer (15).

**Troubleshooting:**

- **Error:** “Missing semicolon”  
  - **Solution:** Use semicolons consistently to avoid ambiguity with implicit returns.

## **Data Types and Variables**

Variables in Vasuki are containers that hold data. Understanding their types is crucial for writing correct programs.

### **Variables**

**Declaration:**
```bash
var a = 10;
```

**Explanation:**

- **Keyword:** `var` declares a variable.
- **Identifier:** `a` is the name of the variable.
- **Value:** `10` (an integer) is assigned to a.  
  **Return Type:** The expression evaluates to an integer (10).

**Assignment:**
```bash
a = a + 5;
```

**Explanation:**

- Updates `a` by adding 5 to its current value.  
  **Return Type:** Returns the new integer value (15).

### **Data Types**

- **Integer:** Represents whole numbers (e.g., 10).  
  **Return Type:** Integer.
- **Float:** Represents decimal numbers (e.g., 3.14).  
  **Return Type:** Floating-point number.

**Troubleshooting:**

- **Error:** “Invalid number token”  
  - **Solution:** Ensure numbers are correctly formatted (only one decimal point for floats).

## **Operators and Expressions**

Operators perform operations on variables and values to produce new values.

### **Arithmetic Operators**

Operators include `+`, `-`, `*`, `/`, `%`, and `**`.

**Example:**
```bash
var sum = 10 + 5;
print(sum);
```

**Explanation:**

- **Addition:** `10 + 5` evaluates to 15.  
  **Return Type:** Integer.
- **print:** Displays the result on the console.

### **Logical and Comparison Operators**

Comparison operators (`<`, `<=`, `>`, `>=`, `==`, `!=`) return booleans. Logical operators (`and`, `or`) combine boolean values.

**Example:**
```bash
if (a > 5) {
    print("a is greater than 5");
}
```

**Explanation:**

- **Comparison:** `a > 5` returns a boolean (true or false).  
  **Return Type:** Boolean.

**Troubleshooting:**

- **Error:** “Unexpected operator”  
  - **Solution:** Check for typos and ensure correct usage.

## **Control Structures**

Control structures determine the order in which your code is executed. In Vasuki, these structures can also return values.

### **Conditional Statements**

**Example:**
```bash
if (x < 20) {
    print("x is less than 20");
} else {
    print("x is 20 or greater");
}
```

**Explanation:**

- **Condition:** Evaluates `x < 20` and returns a boolean.
- **Branching:** Executes the corresponding block based on the condition.  
  **Return Type:** The executed block may return a value, making the entire if-else expression useful in further expressions.

### **Loops**

Loops execute code repeatedly until a condition is met. They too can return the value of the final executed block.

**For Loop Example:**
```bash
for (var i = 0; i < 3; i = i + 1) {
    print(i);
}
```

**Explanation:**

- **Initialization:** `var i = 0` sets up the loop variable.
- **Condition:** `i < 3` continues the loop while true.
- **Increment:** `i = i + 1` increases `i` after each iteration.  
  **Return Type:** The loop returns the value of its last iteration (or its side effect).

**Special Note:** If the loop body is written without a semicolon, its result is implicitly returned.

**While Loop Example:**
```bash
while (x < 100) {
    x = x + 10;
    print(x);
}
```

**Explanation:**

- **Condition:** Continues as long as `x < 100`.
- **Iteration:** Adds 10 to `x` and prints the updated value.  
  **Return Type:** Returns the result of the final loop iteration if no semicolon is used.

**Troubleshooting:**

- **Error:** “Loop condition not met”  
  - **Solution:** Make sure the condition eventually becomes false to avoid infinite loops.

## **Functions and I/O**

### **Output (I/O)**

The `print` function displays data to the console.

**Example:**
```bash
print("Hello, Vasuki!");
```

**Explanation:**

- **Purpose:** Outputs the text “Hello, Vasuki!” to the console.  
  **Return Type:** The `print` function returns no meaningful value (void); it is used for its side effect.

### **Functions (Basic Concept)**

While detailed user-defined functions are covered in the advanced documentation, here are the basics:

**Theory:**

- **Definition:** A function is a reusable block of code that may accept parameters and return a value.
- **Scoping:** Vasuki uniquely supports both static scoping (resolving variables where they are declared) and dynamic scoping (resolving variables based on the calling context). This means if a variable isn’t found in the local scope, the interpreter will first search the static environment (where the function was defined) and then the dynamic environment (where the function was called).
- **Implicit Return:** If you omit the semicolon at the end of a statement, Vasuki automatically treats it as an implicit return of that expression’s value.

**Example (Using Implicit Return):**
```bash
var result = 10 + 5
```

**Explanation:**

- Without a semicolon, Vasuki treats this as returning the value 15 implicitly.

**Troubleshooting:**

- **Error:** “Unknown function”  
  - **Solution:** Ensure that built-in functions (like `print`) are spelled correctly and that your environment is correctly set up.

## **Special Language Features**

Vasuki offers several unique features that enhance its flexibility:

### **Dual Scoping Mechanisms**

- **Static Scoping:** Variables are resolved based on where they are defined in your code.
- **Dynamic Scoping:** Variables are also resolved based on the calling environment at runtime.

**Implication:** This dual approach provides you with the flexibility to write functions that behave differently depending on their context, which is especially useful in larger, more complex programs.

### **Control Structures with Return Values**

- **Behavior:** Structures like `if`, `for`, and `while` can return a value. For example, the evaluated result of an `if` statement can be immediately used as part of an assignment.
- **Implication:** This allows for concise code where control structures contribute directly to expressions.

### **Implicit Return on Omitted Semicolons**

- **Behavior:** If a line is written without a semicolon, Vasuki automatically appends an implicit return at the end.
- **Implication:** This feature simplifies writing short expressions but requires careful, consistent use to avoid unexpected behavior.

## **Error Handling and Troubleshooting**

### **Common Error Types**

- **Syntax Errors:**  
  **Examples:** Missing semicolons, unmatched braces, or typos.  
  **Theory:** Syntax errors occur when the code does not adhere to Vasuki’s grammatical rules. The interpreter cannot parse such code.  
  **Solution:** Check error messages for line numbers, and verify that all statements and blocks follow proper syntax.

- **Runtime Errors:**  
  **Examples:** Using an undefined variable or invalid operations (e.g., division by zero).  
  **Theory:** Runtime errors occur during execution, causing the program to halt.  
  **Solution:** Declare all variables before use and validate operations to ensure they are mathematically or logically sound.

- **Lexical/Parsing Errors:**  
  **Examples:** Invalid tokens (malformed numbers, illegal characters) or unexpected symbols.  
  **Theory:** These errors occur when the interpreter cannot tokenize or parse your source code.  
  **Solution:** Ensure that your code adheres to the expected format for numbers, identifiers, and operators.

### **Troubleshooting Tips**

- **Read Error Messages Carefully:** They often indicate the exact location and type of error.
- **Test in Small Sections:** Isolate code blocks in the REPL to identify problematic segments.
- **Use Comments:** Annotate your code with comments (`//`) to clarify your logic.
- **Review This Documentation:** Revisit sections of the guide to ensure correct syntax and understanding of concepts.

## **Example Program Walkthrough**

Below is a comprehensive example that integrates all of the concepts discussed. Study and run this code to observe how each part works in practice.

```bash
// Declare and initialize variables
var x = 10;
var y = 5;

// Calculate the sum of x and y
var sum = x + y;
print("Sum: " + sum); // Expected output: Sum: 15

// Use an if-else statement to check the sum and return a value implicitly if semicolon is omitted
if (sum > 10) {
    print("Sum is greater than 10");
} else {
    print("Sum is 10 or less");
}

// Use a for loop to iterate and print each iteration number
for (var i = 0; i < 3; i = i + 1) {
    print("Iteration " + i);
}
```

**Detailed Explanation:**

- **Variables:**  
  `var x = 10;` creates an integer variable `x` with a value of 10.  
  `var y = 5;` creates an integer variable `y` with a value of 5.

- **Arithmetic Expression:**  
  `var sum = x + y;` calculates the sum (15) and assigns it to `sum`.  
  **Return Type:** Integer (15).

- **Conditional Statement:**  
  The `if` statement evaluates whether `sum > 10`. Depending on the outcome, it prints an appropriate message.  
  **Return Behavior:** The executed block may implicitly return a value if the semicolon is omitted.

- **Loop:**  
  The `for` loop initializes `i`, checks the condition (`i < 3`), and increments `i` after each iteration, printing the current iteration number each time.  
  **Return Behavior:** The loop returns the result of its final iteration if no semicolon is used, although it is generally used for its side effects.

**Troubleshooting:**  
If errors occur, run each block separately in the interactive shell (REPL) to isolate and resolve issues.

Happy coding and enjoy your journey into learning Vasuki!
